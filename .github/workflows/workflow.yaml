name: Build and Deploy to Google App Engine

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:    # Allows manual triggering

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Node.js for client
      - name: Set up Node.js for client
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './client/package-lock.json'

      # Auth first for secret access
      - name: Auth with Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT }}

      # Set up environment variables for both client and server
      - name: Set up environment variables
        run: |
          # Get MongoDB URI from Secret Manager
          gcloud secrets versions access latest --secret="mongodb-uri" > mongodb-uri.txt
          
          # Get Redis details from Secret Manager
          gcloud secrets versions access latest --secret="redis-host" > redis-host.txt
          gcloud secrets versions access latest --secret="redis-port" > redis-port.txt
          # If you have a password, uncomment the next line and ensure the secret exists in GCP Secret Manager
          # gcloud secrets versions access latest --secret="redis-password" > redis-password.txt
          
          # Set up server environment variables
          echo "MONGO_URI=$(cat mongodb-uri.txt)" > server/.env
          echo "PORT=8080" >> server/.env # GAE will set PORT, but good for consistency
          echo "CLIENT_URL=https://client-dot-cs144-25s-hakob3215.uw.r.appspot.com" >> server/.env
          echo "REDIS_HOST=$(cat redis-host.txt)" >> server/.env
          echo "REDIS_PORT=$(cat redis-port.txt)" >> server/.env
          # If you have a password, uncomment the next line
          # echo "REDIS_PASSWORD=$(cat redis-password.txt)" >> server/.env
          echo "NODE_ENV=production" >> server/.env # Good practice to set NODE_ENV

          # Set up client environment variables
          echo "VITE_API_URL=https://server-dot-cs144-25s-hakob3215.uw.r.appspot.com" > client/.env.production

      # Client build
      - name: Install client dependencies
        run: npm ci
        working-directory: ./client

      - name: Build client
        run: npm run build
        working-directory: ./client

      - name: Inspect built client/dist/index.html
        run: |
          echo "Contents of client/dist/index.html:"
          cat client/dist/index.html || echo "client/dist/index.html not found"
          echo "Listing client/dist directory:"
          ls -R client/dist

      # Setup Node.js for server
      - name: Set up Node.js for server
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './server/package-lock.json'

      # Server build
      - name: Install server dependencies
        run: npm ci
        working-directory: ./server

      # Deploy client to GAE
      - name: Deploy client to App Engine
        id: deploy-client
        uses: google-github-actions/deploy-appengine@v2
        with:
          working_directory: ./client/dist # <-- CHANGE THIS
          deliverables: app.yaml # This will now use client/dist/app.yaml
          project_id: ${{ secrets.GCP_PROJECT }}
          # Ensure your client/app.yaml correctly points to the 'dist' folder for static assets if needed
          # or that your build process places app.yaml in client/dist

      # Deploy server to GAE
      - name: Deploy server to App Engine
        id: deploy-server
        uses: google-github-actions/deploy-appengine@v2
        with:
          working_directory: ./server
          deliverables: app.yaml
          project_id: ${{ secrets.GCP_PROJECT }}

      # Output URLs
      - name: Show deployment URLs
        run: |
          echo "Client deployed to: ${{ steps.deploy-client.outputs.url }}"
          echo "Server deployed to: ${{ steps.deploy-server.outputs.url }}"